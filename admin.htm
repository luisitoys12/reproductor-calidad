<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Panel de Administraci√≥n - EKUSFM</title>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="manifest" href="manifest.json">
    <link rel="icon" type="image/png" href="icon.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #0f172a;
            color: #f8fafc;
            margin: 0;
            padding-top: 70px;
            line-height: 1.6;
        }
        .header {
            background-color: #1e293b;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 9000;
        }
        .header .logo {
            font-size: 1.5rem;
            font-weight: 700;
            color: #38bdf8;
        }
        .header .back-btn {
            background-color: #22d3ee;
            color: #1e293b;
            padding: 8px 15px;
            border-radius: 8px;
            text-decoration: none;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: background-color 0.3s ease;
        }
        .header .back-btn:hover {
            background-color: #06b6d4;
        }
        .container {
            max-width: 1000px;
            margin: 20px auto;
            padding: 0 20px;
        }
        h1 {
            color: #22d3ee;
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5rem;
        }
        .section-admin {
            background-color: #1e293b;
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.5);
        }
        .section-admin h2 {
            color: #38bdf8;
            margin-top: 0;
            margin-bottom: 25px;
            text-align: center;
            font-size: 2rem;
        }
        .instructions {
            background-color: #2d3748;
            border-left: 5px solid #38bdf8;
            padding: 16px 20px;
            margin-bottom: 25px;
            border-radius: 8px;
            font-size: 0.95rem;
            color: #cbd5e1;
        }
        .instructions h3 {
            color: #22d3ee;
            margin-top: 0;
            margin-bottom: 15px;
            font-size: 1.2rem;
        }
        .instructions ul {
            list-style: none;
            padding: 0;
        }
        .instructions ul li {
            margin-bottom: 10px;
            line-height: 1.5;
        }
        .instructions ul li strong {
            color: #f8fafc;
        }
        .instructions ul li code {
            background-color: #1a202c;
            padding: 2px 5px;
            border-radius: 4px;
            font-family: 'Courier New', Courier, monospace;
            color: #a78bfa;
        }
        form {
            margin-bottom: 25px;
        }
        .form-group {
            margin-bottom: 18px;
        }
        .form-group label {
            display: block;
            margin-bottom: 7px;
            color: #cbd5e1;
            font-weight: 500;
        }
        .form-group input[type="text"],
        .form-group input[type="url"],
        .form-group input[type="number"],
        .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #475569;
            border-radius: 8px;
            background-color: #2d3748;
            color: #f8fafc;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }
        .form-group input:focus,
        .form-group textarea:focus {
            border-color: #38bdf8;
            outline: none;
        }
        .form-group textarea {
            resize: vertical;
            min-height: 90px;
        }
        .btn-primary {
            background-color: #22d3ee;
            color: #1e293b;
            padding: 10px 25px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 700;
            font-size: 1.1rem;
            transition: background-color 0.3s, transform 0.2s;
            display: block;
            width: 100%;
            text-align: center;
        }
        .btn-primary:hover {
            background-color: #06b6d4;
            transform: translateY(-2px);
        }
        .btn-primary:active {
            transform: translateY(0);
        }
        .data-list {
            list-style: none;
            padding: 0;
            margin-top: 20px;
        }
        .data-list li {
            background-color: #2d3748;
            padding: 13px 16px;
            margin-bottom: 13px;
            border-radius: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 8px rgba(0,0,0,0.25);
            flex-wrap: wrap;
        }
        .data-list li span {
            flex: 1;
            min-width: 120px;
            margin-right: 10px;
            word-wrap: break-word;
        }
        .data-list li span.rank-display {
            font-weight: bold;
            color: #38bdf8;
            min-width: 45px;
        }
        .data-list li .item-buttons {
            display: flex;
            gap: 10px;
            margin-top: 0;
            align-items: center;
        }
        .data-list .edit-btn,
        .data-list .delete-btn,
        .data-list .move-btn {
            padding: 7px 11px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
            transition: background-color 0.3s;
            font-size: 1em;
        }
        .data-list .edit-btn {
            background-color: #38bdf8;
            color: #1e293b;
        }
        .data-list .edit-btn:hover {
            background-color: #22d3ee;
        }
        .data-list .delete-btn {
            background-color: #ef4444;
            color: #fff;
        }
        .data-list .delete-btn:hover {
            background-color: #dc2626;
        }
        .data-list .move-btn {
            background-color: #607d8b;
            color: #fff;
            padding: 7px 8px;
        }
        .data-list .move-btn:hover {
            background-color: #546a78;
        }
        .data-list .move-btn i {
            font-size: 1.1em;
        }
        .message {
            text-align: center;
            padding: 12px;
            margin-top: 12px;
            border-radius: 8px;
            font-weight: 600;
        }
        .message.success {
            background-color: #10b981;
            color: #1e293b;
        }
        .message.error {
            background-color: #ef4444;
            color: #fff;
        }
        .no-data-message {
            text-align: center;
            color: #94a3b8;
            font-style: italic;
            padding: 18px 0;
        }
        @media (max-width: 700px) {
            .container {
                padding: 0 7px;
            }
            .section-admin {
                padding: 11px;
            }
            .section-admin h2 {
                font-size: 1.3rem;
            }
            h1 {
                font-size: 1.3rem;
            }
            .instructions { padding: 10px 7px; }
        }
    </style>
    <script>
        (function() {
            var host = window.location.hostname;
            var dominiosPermitidos = [
                "estacionkusmedios.com",
                "reproductor-calidad.vercel.app",
                "localhost"
            ];
            var esSubdominioEKUS = host.endsWith(".estacionkusmedios.com");
            var esDominioValido = dominiosPermitidos.includes(host) || esSubdominioEKUS;
            if (!esDominioValido) {
                document.documentElement.innerHTML = `
                    <head>
                        <meta charset="UTF-8">
                        <title>Acceso no autorizado</title>
                        <style>
                            body {
                                font-family: 'Poppins', Arial, sans-serif;
                                background: #181e2a; color: #fff;
                                text-align: center;
                                margin: 0; padding: 0;
                                display: flex; flex-direction: column; justify-content: center; min-height: 100vh;
                            }
                            h1 { font-size: 2.4em; margin-top: 2em; color: #38bdf8;}
                            p { color: #ddd; }
                        </style>
                    </head>
                    <body>
                        <h1>Acceso no autorizado</h1>
                        <p>Este panel solo puede visualizarse en <b>estacionkusmedios.com</b> y sus subdominios, o en <b>reproductor-calidad.vercel.app</b>.</p>
                    </body>
                `;
                throw new Error('Unauthorized access');
            }
        })();
    </script>
    <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-database-compat.js"></script>
</head>
<body>
    <div class="header">
        <div class="logo">ADMIN EKUSFM</div>
        <a href="index.htm" class="back-btn">
            <i class="fas fa-arrow-left"></i> Volver al Inicio
        </a>
    </div>
    <div class="container">
        <h1>Panel de Administraci√≥n de Contenido</h1>
        <!-- Noticias -->
        <div class="section-admin">
            <h2>Administrar Noticias</h2>
            <div class="instructions">
                <h3>Instrucciones de Uso - Noticias</h3>
                <ul>
                    <li><strong>T√≠tulo:</strong> Ingresa el t√≠tulo principal de tu noticia.</li>
                    <li><strong>Contenido:</strong> Escribe el cuerpo completo de la noticia. Usa p√°rrafos (presiona Enter) para separar ideas, tu c√≥digo lo respetar√°.</li>
                    <li><strong>URL de Imagen (Opcional):</strong> Pega la URL directa de la imagen que quieres asociar con esta noticia. Si no pones ninguna, la noticia se mostrar√° sin imagen.</li>
                    <li>Al <strong>guardar</strong>, la noticia se a√±adir√° o actualizar√°.</li>
                    <li>Usa los botones <strong>"Editar"</strong> y <strong>"Eliminar"</strong> para gestionar las noticias existentes.</li>
                    <li>Las noticias se muestran en la p√°gina principal ordenadas por fecha (las m√°s recientes primero).</li>
                </ul>
            </div>
            <form id="newsForm">
                <input type="hidden" id="newsId" value="">
                <div class="form-group">
                    <label for="newsTitle">T√≠tulo de la Noticia:</label>
                    <input type="text" id="newsTitle" required>
                </div>
                <div class="form-group">
                    <label for="newsContent">Contenido de la Noticia:</label>
                    <textarea id="newsContent" rows="5" required></textarea>
                </div>
                <div class="form-group">
                    <label for="newsImageUrl">URL de Imagen (Opcional):</label>
                    <input type="url" id="newsImageUrl" placeholder="https://ejemplo.com/imagen.jpg">
                </div>
                <button type="submit" class="btn-primary">Guardar Noticia</button>
            </form>
            <ul id="newsList" class="data-list">
                <p class="no-data-message">Cargando noticias...</p>
            </ul>
        </div>
        <!-- Top 10 Videos -->
        <div class="section-admin">
            <h2>Administrar Top 10 Canciones (Videos)</h2>
            <div class="instructions">
                <h3>Instrucciones de Uso - Top 10 Videos</h3>
                <ul>
                    <li><strong>T√≠tulo:</strong> Nombre de la canci√≥n y/o artista.</li>
                    <li><strong>ID de Video (YouTube):</strong> Pega SOLO el identificador √∫nico del video de YouTube (la parte despu√©s de <code>v=</code> y antes de cualquier <code>&</code> o <code>?</code>).</li>
                    <li><strong>Votos:</strong> Valor num√©rico de los votos. Se puede ajustar manualmente aqu√≠.</li>
                    <li><strong>Orden (Flechas):</strong> Usa las flechas <i class="fas fa-arrow-up"></i> y <i class="fas fa-arrow-down"></i> para cambiar el rank de las canciones.</li>
                    <li>Al <strong>guardar</strong>, el video se a√±adir√° o actualizar√°. El campo <strong>Rank</strong> se autogenera y se ajusta autom√°ticamente al mover con las flechas.</li>
                    <li>Usa los botones <strong>"Editar"</strong> y <strong>"Eliminar"</strong> para gestionar las canciones existentes.</li>
                </ul>
            </div>
            <form id="videosForm">
                <input type="hidden" id="videoId" value="">
                <div class="form-group">
                    <label for="videoTitle">T√≠tulo de la Canci√≥n:</label>
                    <input type="text" id="videoTitle" required>
                </div>
                <div class="form-group">
                    <label for="youtubeId">ID de Video (YouTube):</label>
                    <input type="text" id="youtubeId" placeholder="Ej. ABC123XYZ" required>
                </div>
                 <div class="form-group">
                     <label for="videoVotes">Votos:</label>
                     <input type="number" id="videoVotes" min="0" value="0" required>
                 </div>
                <button type="submit" class="btn-primary">Guardar Video</button>
            </form>
            <ul id="videosList" class="data-list">
                <p class="no-data-message">Cargando videos...</p>
            </ul>
        </div>
        <!-- Programas -->
        <div class="section-admin">
            <h2>Administrar Programas</h2>
            <div class="instructions">
                <h3>Instrucciones de Uso - Programas</h3>
                <ul>
                    <li><strong>Nombre:</strong> T√≠tulo del programa (ej. "Ma√±anas con EKUS").</li>
                    <li><strong>Horario:</strong> Define el d√≠a y la hora. Ejemplo: <code>Lunes a Viernes 7:00 AM - 10:00 AM</code></li>
                    <li><strong>Descripci√≥n:</strong> Un breve resumen de lo que trata el programa.</li>
                    <li>Al <strong>guardar</strong>, el programa se a√±adir√° o actualizar√°.</li>
                    <li>Usa los botones <strong>"Editar"</strong> y <strong>"Eliminar"</strong> para gestionar los programas existentes.</li>
                </ul>
            </div>
            <form id="programsForm">
                <input type="hidden" id="programId" value="">
                <div class="form-group">
                    <label for="programName">Nombre del Programa:</label>
                    <input type="text" id="programName" required>
                </div>
                <div class="form-group">
                    <label for="programSchedule">Horario:</label>
                    <input type="text" id="programSchedule" placeholder="Ej. Lunes a Viernes 8:00 AM - 10:00 AM" required>
                </div>
                <div class="form-group">
                    <label for="programDescription">Descripci√≥n:</label>
                    <textarea id="programDescription" rows="3"></textarea>
                </div>
                <button type="submit" class="btn-primary">Guardar Programa</button>
            </form>
            <ul id="programsList" class="data-list">
                <p class="no-data-message">Cargando programas...</p>
            </ul>
        </div>
        <!-- Funciones Destacadas -->
        <div class="section-admin">
            <h2>Administrar Funciones Destacadas</h2>
            <div class="instructions">
                <h3>Instrucciones de Uso - Funciones Destacadas</h3>
                <ul>
                    <li><strong>Nombre:</strong> Nombre de la funci√≥n o caracter√≠stica destacada.</li>
                    <li><strong>Orden:</strong> Asigna un n√∫mero para determinar en qu√© orden se mostrar√° en la lista de funciones destacadas.</li>
                    <li>Al <strong>guardar</strong>, la funci√≥n se a√±adir√° o actualizar√°.</li>
                    <li>Usa los botones <strong>"Editar"</strong> y <strong>"Eliminar"</strong> para gestionar las funciones existentes.</li>
                </ul>
            </div>
            <form id="featuresForm">
                <input type="hidden" id="featureId" value="">
                <div class="form-group">
                    <label for="featureName">Nombre de la Funci√≥n:</label>
                    <input type="text" id="featureName" required>
                </div>
                <div class="form-group">
                    <label for="featureOrder">Orden:</label>
                    <input type="number" id="featureOrder" min="1" required>
                </div>
                <button type="submit" class="btn-primary">Guardar Funci√≥n</button>
            </form>
            <ul id="featuresList" class="data-list">
                <p class="no-data-message">Cargando funciones...</p>
            </ul>
        </div>
    </div>
    <script>
        // *** TU CONFIGURACI√ìN DE FIREBASE (¬°C√ìPIALA EXACTAMENTE DE TU CONSOLA!) ***
        const firebaseConfig = {
            apiKey: "AIzaSyBHlQ6WQauQLTbvp_iHbkWZ8Bhv3fntSpM",
            authDomain: "ekusfm-d1a9d.firebaseapp.com",
            databaseURL: "https://ekusfm-d1a9d-default-rtdb.firebaseio.com",
            projectId: "ekusfm-d1a9d",
            storageBucket: "ekusfm-d1a9d.appspot.com",
            messagingSenderId: "849619346647",
            appId: "1:849619346647:web:06559451c66950d9b03c92",
            measurementId: "G-X59DPNG6N4"
        };
        if (!firebase.apps.length) firebase.initializeApp(firebaseConfig);
        const database = firebase.database();

        // --- FUNCIONES GENERALES PARA CRUD ---
        function showMessage(msg, type = 'success') {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}`;
            messageDiv.textContent = msg;
            document.body.appendChild(messageDiv);
            setTimeout(() => {
                messageDiv.remove();
            }, 3000);
        }
        function deleteItem(path, id) {
            if (confirm('¬øEst√°s seguro de que quieres eliminar este elemento?')) {
                database.ref(path + '/' + id).remove()
                    .then(() => showMessage('Elemento eliminado con √©xito.'))
                    .catch(error => showMessage('Error al eliminar elemento: ' + error.message, 'error'));
            }
        }
        // --- Noticias ---
        const newsForm = document.getElementById('newsForm');
        const newsList = document.getElementById('newsList');
        function loadNewsAdmin() {
            newsList.innerHTML = '<p class="no-data-message">Cargando noticias...</p>';
            database.ref('noticias').orderByChild('date').on('value', (snapshot) => {
                newsList.innerHTML = '';
                if (!snapshot.exists()) {
                    newsList.innerHTML = '<p class="no-data-message">No hay noticias para administrar.</p>';
                    return;
                }
                const newsData = [];
                snapshot.forEach(childSnapshot => {
                    newsData.push({ id: childSnapshot.key, ...childSnapshot.val() });
                });
                newsData.sort((a, b) => b.date - a.date);
                newsData.forEach(newsItem => {
                    const li = document.createElement('li');
                    const formattedDate = new Date(newsItem.date).toLocaleDateString('es-ES', { year: 'numeric', month: 'short', day: 'numeric' });
                    li.innerHTML = `
                        <span><strong>${newsItem.title}</strong> (${formattedDate})</span>
                        <div class="item-buttons">
                            <button class="edit-btn"
                                     data-id="${newsItem.id}"
                                     data-title="${newsItem.title}"
                                     data-content="${newsItem.content}"
                                     data-imageurl="${newsItem.imageUrl || ''}"
                            >Editar</button>
                            <button class="delete-btn" data-id="${newsItem.id}">Eliminar</button>
                        </div>
                    `;
                    newsList.appendChild(li);
                });
                document.querySelectorAll('#newsList .edit-btn').forEach(button => {
                    button.addEventListener('click', (e) => {
                        document.getElementById('newsId').value = e.target.dataset.id;
                        document.getElementById('newsTitle').value = e.target.dataset.title;
                        document.getElementById('newsContent').value = e.target.dataset.content;
                        document.getElementById('newsImageUrl').value = e.target.dataset.imageurl;
                    });
                });
                document.querySelectorAll('#newsList .delete-btn').forEach(button => {
                    button.addEventListener('click', (e) => deleteItem('noticias', e.target.dataset.id));
                });
            });
        }
        newsForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const id = document.getElementById('newsId').value;
            const title = document.getElementById('newsTitle').value;
            const content = document.getElementById('newsContent').value;
            const imageUrl = document.getElementById('newsImageUrl').value;
            const newsItem = {
                title: title,
                content: content,
                date: firebase.database.ServerValue.TIMESTAMP,
                imageUrl: imageUrl || null
            };
            if (id) {
                database.ref('noticias/' + id).update(newsItem)
                    .then(() => {
                        showMessage('Noticia actualizada con √©xito.');
                        newsForm.reset();
                        document.getElementById('newsId').value = '';
                    })
                    .catch(error => showMessage('Error al actualizar noticia: ' + error.message, 'error'));
            } else {
                database.ref('noticias').push(newsItem)
                    .then(() => {
                        showMessage('Noticia a√±adida con √©xito.');
                        newsForm.reset();
                    })
                    .catch(error => showMessage('Error al a√±adir noticia: ' + error.message, 'error'));
            }
        });

        // --- Top 10 Videos ---
        const videosForm = document.getElementById('videosForm');
        const videosList = document.getElementById('videosList');
        let currentVideosData = [];
        function loadVideosAdmin() {
            videosList.innerHTML = '<p class="no-data-message">Cargando videos...</p>';
            database.ref('top10videos').orderByChild('rank').on('value', (snapshot) => {
                videosList.innerHTML = '';
                if (!snapshot.exists()) {
                    videosList.innerHTML = '<p class="no-data-message">No hay videos en el Top 10 para administrar.</p>';
                    return;
                }
                currentVideosData = [];
                snapshot.forEach(childSnapshot => {
                    currentVideosData.push({ id: childSnapshot.key, ...childSnapshot.val() });
                });
                currentVideosData.sort((a, b) => a.rank - b.rank);
                let rankChanged = false;
                currentVideosData.forEach((item, index) => {
                    const newRank = index + 1;
                    if (item.rank !== newRank) {
                        item.rank = newRank;
                        database.ref(`top10videos/${item.id}/rank`).set(newRank);
                        rankChanged = true;
                    }
                });
                currentVideosData.forEach((videoItem, index) => {
                    const li = document.createElement('li');
                    li.innerHTML = `
                        <span class="rank-display">#${videoItem.rank}</span>
                        <span><strong>${videoItem.title}</strong> (Votos: ${videoItem.votes || 0})</span>
                        <div class="item-buttons">
                            <button class="move-btn move-up" data-id="${videoItem.id}" data-current-rank="${videoItem.rank}" ${index === 0 ? 'disabled' : ''}><i class="fas fa-arrow-up"></i></button>
                            <button class="move-btn move-down" data-id="${videoItem.id}" data-current-rank="${videoItem.rank}" ${index === currentVideosData.length - 1 ? 'disabled' : ''}><i class="fas fa-arrow-down"></i></button>
                            <button class="edit-btn" data-id="${videoItem.id}" data-title="${videoItem.title}" data-videoid="${videoItem.videoId}" data-votes="${videoItem.votes || 0}">Editar</button>
                            <button class="delete-btn" data-id="${videoItem.id}">Eliminar</button>
                        </div>
                    `;
                    videosList.appendChild(li);
                });
                document.querySelectorAll('#videosList .edit-btn').forEach(button => {
                    button.addEventListener('click', (e) => {
                        document.getElementById('videoId').value = e.target.dataset.id;
                        document.getElementById('videoTitle').value = e.target.dataset.title;
                        document.getElementById('youtubeId').value = e.target.dataset.videoid;
                        document.getElementById('videoVotes').value = e.target.dataset.votes;
                    });
                });
                document.querySelectorAll('#videosList .delete-btn').forEach(button => {
                    button.addEventListener('click', (e) => deleteItem('top10videos', e.target.dataset.id));
                });
                document.querySelectorAll('#videosList .move-up').forEach(button => {
                    button.addEventListener('click', (e) => moveVideoRank(e.target.dataset.id, 'up'));
                });
                document.querySelectorAll('#videosList .move-down').forEach(button => {
                    button.addEventListener('click', (e) => moveVideoRank(e.target.dataset.id, 'down'));
                });
                if (rankChanged) showMessage('Ranks actualizados autom√°ticamente para mantener la secuencia.');
            });
        }
        videosForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const id = document.getElementById('videoId').value;
            const title = document.getElementById('videoTitle').value;
            const videoId = document.getElementById('youtubeId').value;
            const votes = parseInt(document.getElementById('videoVotes').value);
            let newRank;
            if (id) {
                newRank = currentVideosData.find(v => v.id === id)?.rank;
            } else {
                newRank = currentVideosData.length > 0 ? Math.max(...currentVideosData.map(v => v.rank)) + 1 : 1;
            }
            const videoItem = {
                title: title,
                videoId: videoId,
                votes: votes,
                rank: newRank
            };
            if (id) {
                database.ref('top10videos/' + id).update(videoItem)
                    .then(() => {
                        showMessage('Video actualizado con √©xito.');
                        videosForm.reset();
                        document.getElementById('videoId').value = '';
                    })
                    .catch(error => showMessage('Error al actualizar video: ' + error.message, 'error'));
            } else {
                database.ref('top10videos').push(videoItem)
                    .then(() => {
                        showMessage('Video a√±adido con √©xito.');
                        videosForm.reset();
                    })
                    .catch(error => showMessage('Error al a√±adir video: ' + error.message, 'error'));
            }
        });
        function moveVideoRank(videoId, direction) {
            const videoIndex = currentVideosData.findIndex(v => v.id === videoId);
            if (videoIndex === -1) return;
            const targetIndex = direction === 'up' ? videoIndex - 1 : videoIndex + 1;
            if (targetIndex >= 0 && targetIndex < currentVideosData.length) {
                const currentVideo = currentVideosData[videoIndex];
                const targetVideo = currentVideosData[targetIndex];
                const tempRank = currentVideo.rank;
                currentVideo.rank = targetVideo.rank;
                targetVideo.rank = tempRank;
                const updates = {};
                updates[`top10videos/${currentVideo.id}/rank`] = currentVideo.rank;
                updates[`top10videos/${targetVideo.id}/rank`] = targetVideo.rank;
                database.ref().update(updates)
                    .then(() => showMessage('Rank del video actualizado.'))
                    .catch(error => showMessage('Error al mover el video: ' + error.message, 'error'));
            }
        }
        // --- Programas ---
        const programsForm = document.getElementById('programsForm');
        const programsList = document.getElementById('programsList');
        function loadProgramsAdmin() {
            programsList.innerHTML = '<p class="no-data-message">Cargando programas...</p>';
            database.ref('programas').on('value', (snapshot) => {
                programsList.innerHTML = '';
                if (!snapshot.exists()) {
                    programsList.innerHTML = '<p class="no-data-message">No hay programas para administrar.</p>';
                    return;
                }
                snapshot.forEach(childSnapshot => {
                    const programItem = { id: childSnapshot.key, ...childSnapshot.val() };
                    const li = document.createElement('li');
                    li.innerHTML = `
                        <span><strong>${programItem.name}</strong> (${programItem.schedule})</span>
                        <div class="item-buttons">
                            <button class="edit-btn"
                                     data-id="${programItem.id}"
                                     data-name="${programItem.name}"
                                     data-schedule="${programItem.schedule}"
                                     data-description="${programItem.description || ''}"
                            >Editar</button>
                            <button class="delete-btn" data-id="${programItem.id}">Eliminar</button>
                        </div>
                    `;
                    programsList.appendChild(li);
                });
                document.querySelectorAll('#programsList .edit-btn').forEach(button => {
                    button.addEventListener('click', (e) => {
                        document.getElementById('programId').value = e.target.dataset.id;
                        document.getElementById('programName').value = e.target.dataset.name;
                        document.getElementById('programSchedule').value = e.target.dataset.schedule;
                        document.getElementById('programDescription').value = e.target.dataset.description;
                    });
                });
                document.querySelectorAll('#programsList .delete-btn').forEach(button => {
                    button.addEventListener('click', (e) => deleteItem('programas', e.target.dataset.id));
                });
            });
        }
        programsForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const id = document.getElementById('programId').value;
            const name = document.getElementById('programName').value;
            const schedule = document.getElementById('programSchedule').value;
            const description = document.getElementById('programDescription').value;
            const programItem = {
                name: name,
                schedule: schedule,
                description: description || null
            };
            if (id) {
                database.ref('programas/' + id).update(programItem)
                    .then(() => {
                        showMessage('Programa actualizado con √©xito.');
                        programsForm.reset();
                        document.getElementById('programId').value = '';
                    })
                    .catch(error => showMessage('Error al actualizar programa: ' + error.message, 'error'));
            } else {
                database.ref('programas').push(programItem)
                    .then(() => {
                        showMessage('Programa a√±adido con √©xito.');
                        programsForm.reset();
                    })
                    .catch(error => showMessage('Error al a√±adir programa: ' + error.message, 'error'));
            }
        });
        // --- Funciones Destacadas ---
        const featuresForm = document.getElementById('featuresForm');
        const featuresList = document.getElementById('featuresList');
        function loadFeaturesAdmin() {
            featuresList.innerHTML = '<p class="no-data-message">Cargando funciones...</p>';
            database.ref('funcionesDestacadas').orderByChild('order').on('value', (snapshot) => {
                featuresList.innerHTML = '';
                if (!snapshot.exists()) {
                    featuresList.innerHTML = '<p class="no-data-message">No hay funciones destacadas para administrar.</p>';
                    return;
                }
                const featuresData = [];
                snapshot.forEach(childSnapshot => {
                    featuresData.push({ id: childSnapshot.key, ...childSnapshot.val() });
                });
                featuresData.forEach(featureItem => {
                    const li = document.createElement('li');
                    li.innerHTML = `
                        <span><strong>${featureItem.name}</strong> (Orden: ${featureItem.order})</span>
                        <div class="item-buttons">
                            <button class="edit-btn"
                                     data-id="${featureItem.id}"
                                     data-name="${featureItem.name}"
                                     data-order="${featureItem.order}"
                            >Editar</button>
                            <button class="delete-btn" data-id="${featureItem.id}">Eliminar</button>
                        </div>
                    `;
                    featuresList.appendChild(li);
                });
                document.querySelectorAll('#featuresList .edit-btn').forEach(button => {
                    button.addEventListener('click', (e) => {
                        document.getElementById('featureId').value = e.target.dataset.id;
                        document.getElementById('featureName').value = e.target.dataset.name;
                        document.getElementById('featureOrder').value = e.target.dataset.order;
                    });
                });
                document.querySelectorAll('#featuresList .delete-btn').forEach(button => {
                    button.addEventListener('click', (e) => deleteItem('funcionesDestacadas', e.target.dataset.id));
                });
            });
        }
        featuresForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const id = document.getElementById('featureId').value;
            const name = document.getElementById('featureName').value;
            const order = parseInt(document.getElementById('featureOrder').value);
            const featureItem = {
                name: name,
                order: order
            };
            if (id) {
                database.ref('funcionesDestacadas/' + id).update(featureItem)
                    .then(() => {
                        showMessage('Funci√≥n destacada actualizada con √©xito.');
                        featuresForm.reset();
                        document.getElementById('featureId').value = '';
                    })
                    .catch(error => showMessage('Error al actualizar funci√≥n: ' + error.message, 'error'));
            } else {
                database.ref('funcionesDestacadas').push(featureItem)
                    .then(() => {
                        showMessage('Funci√≥n destacada a√±adida con √©xito.');
                        featuresForm.reset();
                    })
                    .catch(error => showMessage('Error al a√±adir funci√≥n: ' + error.message, 'error'));
            }
        });
        document.addEventListener('DOMContentLoaded', () => {
            loadNewsAdmin();
            loadVideosAdmin();
            loadProgramsAdmin();
            loadFeaturesAdmin();
        });
    </script>
</body>
</html>
