<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Noticias - EKUSFM</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="style.css" />
    
    <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-database-compat.js"></script> 
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="sha512-Fo3rlrZj/k7ujTnHg4CGR2D7kSs0V4LLanw2qksYuMGFQ+PzTM8tL3mQ1c6C4L2C6S9uF9bF5Z5l4L0x0t5w==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--primary-color);
            color: var(--text-color);
            margin: 0;
            padding: 20px;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
        }
        h1 {
            text-align: center;
            margin-bottom: 24px;
        }
        .news-item {
            background: #1e293b;
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 16px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        }
        .news-item h2 {
            margin-top: 0;
            color: #38bdf8;
        }
        .news-item p {
            margin-bottom: 0;
        }
        .news-date {
            font-size: 0.85rem;
            color: #94a3b8;
            margin-bottom: 8px;
        }
        /* Mini-player styles */
        #mini-reproductor {
            position: fixed;
            top: 15px;
            left: 15px;
            width: 220px;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 2px 10px #0002;
            z-index: 10000;
            padding: 7px 10px 7px 10px;
            display: flex;
            align-items: center;
        }
        #mini-reproductor audio {
            width: 100%;
            height: 32px;
        }
        .mini-player {
            position: fixed;
            top: 15px;
            left: 15px;
            width: 280px;
            background: url('https://images.pexels.com/photos/3082341/pexels-photo-3082341.jpeg') no-repeat center center;
            background-size: cover;
            border-radius: 10px;
            box-shadow: 0 2px 10px #0008;
            z-index: 10000;
            padding: 8px 12px;
            display: flex;
            align-items: center;
            gap: 10px;
            color: #fff;
            font-family: 'Poppins', Arial, sans-serif;
            position: relative;
            overflow: hidden;
        }
        .mini-player::before {
            content: "";
            position: absolute;
            top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 0;
            border-radius: 10px;
        }
        .mini-play-btn {
            background: #22d3ee;
            border: none;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            color: #222;
            font-size: 1.2rem;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1;
            position: relative;
        }
        .mini-song-info {
            flex-grow: 1;
            overflow: hidden;
            z-index: 1;
            position: relative;
        }
        .mini-song-title {
            font-weight: 600;
            font-size: 0.9rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .mini-artist-name {
            font-size: 0.8rem;
            color: #38bdf8;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .mini-volume-control {
            width: 70px;
            cursor: pointer;
            z-index: 1;
            position: relative;
        }
    </style>
</head>
<body>
    <div id="mini-reproductor" class="mini-player">
        <button id="playPauseMiniBtn" class="mini-play-btn" title="Play/Pause">
            <i id="miniPlayIcon" class="fa-solid fa-play"></i>
        </button>
        <div class="mini-song-info">
            <div id="miniSongTitle" class="mini-song-title">Cargando...</div>
            <div id="miniArtistName" class="mini-artist-name"></div>
        </div>
        <input type="range" id="miniVolumeControl" class="mini-volume-control" min="0" max="1" step="0.01" value="1" title="Volume" />
        <audio id="audio-mini" preload="auto" crossorigin="anonymous"></audio>
    </div>
    <h1>Noticias EKUSFM</h1>
    <div id="news-container">
        <p>Cargando noticias...</p>
    </div>

    <section id="youtube-videos" style="margin-top: 40px;">
        <h2>Top 10 Canciones Más Escuchadas</h2>
        <div id="videos-container" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 16px;"></div>
    </section>

    <section id="programas" style="margin-top: 40px;">
        <h2>Revive Nuestros Programas</h2>
        <div id="programs-container" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 16px;"></div>
    </section>

    <section id="other-features" style="margin-top: 40px;">
        <h2>Otras Funciones Geniales</h2>
        <ul id="features-list" style="list-style: disc inside; color: #38bdf8;"></ul>
    </section>

    <script>
        // *** TU CONFIGURACIÓN DE FIREBASE (¡AHORA YA CON TUS VALORES REALES!) ***
        const firebaseConfig = {
            apiKey: "AIzaSyBHlQ6WQauQLTbvp_iHbkWZ8Bhv3fntSpM",
            authDomain: "ekusfm-d1a9d.firebaseapp.com",
            databaseURL: "https://ekusfm-d1a9d-default-rtdb.firebaseio.com",
            projectId: "ekusfm-d1a9d",
            storageBucket: "ekusfm-d1a9d.firebasestorage.app",
            messagingSenderId: "849619346647",
            appId: "1:849619346647:web:06559451c66950d9b03c92",
            measurementId: "G-X59DPNG6N4"
        };

        // Inicializa Firebase solo si no está ya inicializado
        if (!firebase.apps.length) {
            firebase.initializeApp(firebaseConfig);
        }

        // Inicializa Realtime Database
        const database = firebase.database();

        const newsContainer = document.getElementById('news-container');
        const videosContainer = document.getElementById('videos-container');
        const programsContainer = document.getElementById('programs-container');
        const featuresList = document.getElementById('features-list');

        function formatDate(timestamp) {
            // Realtime Database devuelve timestamps como números (milisegundos desde Epoch).
            // Aseguramos que es un objeto Date válido.
            const date = typeof timestamp === 'number' ? new Date(timestamp) : new Date(timestamp);
            return date.toLocaleDateString('es-ES', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }

        // Función para cargar noticias de Realtime Database
        function loadNews() {
            newsContainer.innerHTML = '<p>Cargando noticias...</p>';
            database.ref('noticias').orderByChild('date').once('value')
                .then(snapshot => {
                    newsContainer.innerHTML = '';
                    if (!snapshot.exists() || snapshot.val() === null) {
                        newsContainer.innerHTML = '<p>No hay noticias disponibles.</p>';
                        return;
                    }
                    const newsData = snapshot.val();
                    const sortedNews = [];
                    // Convertir el objeto de Firebase en un array para poder ordenar
                    for (let key in newsData) {
                        if (newsData.hasOwnProperty(key)) { // Asegúrate de que la propiedad pertenece al objeto
                            sortedNews.push({ id: key, ...newsData[key] });
                        }
                    }
                    // Ordenar por fecha en orden descendente (más reciente primero)
                    // Asumiendo que 'date' en tu DB es un timestamp numérico o una cadena ISO
                    sortedNews.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

                    sortedNews.forEach(item => {
                        const div = document.createElement('div');
                        div.className = 'news-item';

                        const title = document.createElement('h2');
                        title.textContent = item.title || 'Sin título';

                        const date = document.createElement('div');
                        date.className = 'news-date';
                        date.textContent = item.date ? formatDate(item.date) : '';

                        const content = document.createElement('p');
                        content.textContent = item.content || '';

                        div.appendChild(title);
                        div.appendChild(date);
                        div.appendChild(content);

                        newsContainer.appendChild(div);
                    });
                })
                .catch(error => {
                    newsContainer.innerHTML = '<p>Error al cargar las noticias.</p>';
                    console.error('Error loading news:', error);
                });
        }

        // Función para cargar videos de YouTube de Realtime Database
        function loadYouTubeVideos() {
            videosContainer.innerHTML = '<p>Cargando videos...</p>';
            database.ref('top10videos').orderByChild('rank').once('value')
                .then(snapshot => {
                    videosContainer.innerHTML = '';
                    if (!snapshot.exists() || snapshot.val() === null) {
                        videosContainer.innerHTML = '<p>No hay videos disponibles.</p>';
                        return;
                    }
                    const videosData = snapshot.val();
                    const sortedVideos = [];
                    for (let key in videosData) {
                        if (videosData.hasOwnProperty(key)) {
                            sortedVideos.push({ id: key, ...videosData[key] });
                        }
                    }
                    // Ordenar por rank numérico
                    sortedVideos.sort((a, b) => (a.rank || 0) - (b.rank || 0));

                    sortedVideos.forEach(item => {
                        const videoId = item.videoId;
                        const title = item.title || '';
                        const videoDiv = document.createElement('div');
                        videoDiv.style.borderRadius = '12px';
                        videoDiv.style.overflow = 'hidden';
                        videoDiv.style.boxShadow = '0 2px 8px rgba(0,0,0,0.3)';
                        // URL de YouTube corregida
                        videoDiv.innerHTML = `
                            <iframe width="100%" height="160" src="https://www.youtube.com/embed/${videoId}" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                            <p style="padding: 8px; margin: 0; color: #fff;">${title}</p>
                        `;
                        videosContainer.appendChild(videoDiv);
                    });
                })
                .catch(error => {
                    videosContainer.innerHTML = '<p>Error al cargar los videos.</p>';
                    console.error('Error loading videos:', error);
                });
        }

        // Función para cargar programas de Realtime Database
        function loadPrograms() {
            programsContainer.innerHTML = '<p>Cargando programas...</p>';
            database.ref('programas').orderByChild('name').once('value')
                .then(snapshot => {
                    programsContainer.innerHTML = '';
                    if (!snapshot.exists() || snapshot.val() === null) {
                        programsContainer.innerHTML = '<p>No hay programas disponibles.</p>';
                        return;
                    }
                    const programsData = snapshot.val();
                    const sortedPrograms = [];
                    for (let key in programsData) {
                        if (programsData.hasOwnProperty(key)) {
                            sortedPrograms.push({ id: key, ...programsData[key] });
                        }
                    }
                    // Ordenar por nombre alfabéticamente
                    sortedPrograms.sort((a, b) => (a.name || '').localeCompare(b.name || ''));

                    sortedPrograms.forEach(item => {
                        const name = item.name || '';
                        const schedule = item.schedule || '';
                        const description = item.description || '';
                        const card = document.createElement('div');
                        card.style.background = '#1e293b';
                        card.style.borderRadius = '12px';
                        card.style.padding = '16px';
                        card.style.color = '#fff';
                        card.style.boxShadow = '0 2px 8px rgba(0,0,0,0.3)';
                        card.innerHTML = `
                            <h3>${name}</h3>
                            <p><strong>Horario:</strong> ${schedule}</p>
                            <p>${description}</p>
                        `;
                        programsContainer.appendChild(card);
                    });
                })
                .catch(error => {
                    programsContainer.innerHTML = '<p>Error al cargar los programas.</p>';
                    console.error('Error loading programs:', error);
                });
        }

        // Función para cargar otras 10 características de Realtime Database
        function loadOtherFeatures() {
            featuresList.innerHTML = '<li>Cargando funciones...</li>';
            database.ref('features').orderByChild('order').once('value')
                .then(snapshot => {
                    featuresList.innerHTML = '';
                    if (!snapshot.exists() || snapshot.val() === null) {
                        featuresList.innerHTML = '<li>No hay funciones disponibles.</li>';
                        return;
                    }
                    const featuresData = snapshot.val();
                    const sortedFeatures = [];
                    for (let key in featuresData) {
                        if (featuresData.hasOwnProperty(key)) {
                            sortedFeatures.push({ id: key, ...featuresData[key] });
                        }
                    }
                    // Ordenar por 'order' numéricamente
                    sortedFeatures.sort((a, b) => (a.order || 0) - (b.order || 0));

                    sortedFeatures.forEach(item => {
                        const featureName = item.name || '';
                        const li = document.createElement('li');
                        li.textContent = featureName;
                        featuresList.appendChild(li);
                    });
                })
                .catch(error => {
                    featuresList.innerHTML = '<li>Error al cargar las funciones.</li>';
                    console.error('Error loading features:', error);
                });
        }

        // Script para el mini-reproductor (asegúrate de que las rutas de audio sean correctas)
        const audioMini = document.getElementById('audio-mini');
        const playPauseMiniBtn = document.getElementById('playPauseMiniBtn');
        const miniPlayIcon = document.getElementById('miniPlayIcon');
        const miniVolumeControl = document.getElementById('miniVolumeControl');
        const miniSongTitle = document.getElementById('miniSongTitle');
        const miniArtistName = document.getElementById('miniArtistName');

        // Puedes configurar la fuente de audio aquí. Por ejemplo, una URL de streaming de tu radio.
        // O cargarla desde Firebase si tienes una ruta para eso.
        audioMini.src = 'URL_DE_TU_STREAMING_DE_RADIO_AQUI'; // ¡CAMBIA ESTO! Ejemplo: 'https://stream.ekusfm.com/live'

        playPauseMiniBtn.addEventListener('click', () => {
            if (audioMini.paused) {
                audioMini.play();
                miniPlayIcon.classList.remove('fa-play');
                miniPlayIcon.classList.add('fa-pause');
            } else {
                audioMini.pause();
                miniPlayIcon.classList.remove('fa-pause');
                miniPlayIcon.classList.add('fa-play');
            }
        });

        miniVolumeControl.addEventListener('input', () => {
            audioMini.volume = miniVolumeControl.value;
        });

        audioMini.addEventListener('play', () => {
            miniSongTitle.textContent = 'EKUSFM En Vivo'; // Puedes actualizar esto dinámicamente si tienes metadatos del stream
            miniArtistName.textContent = '¡Tu Radio Favorita!';
        });

        audioMini.addEventListener('pause', () => {
            miniSongTitle.textContent = 'Pausado';
            miniArtistName.textContent = '';
        });

        audioMini.addEventListener('error', (e) => {
            console.error('Error en el mini-reproductor:', e);
            miniSongTitle.textContent = 'Error al cargar audio';
            miniArtistName.textContent = 'Verifica la URL del stream';
            miniPlayIcon.classList.remove('fa-pause');
            miniPlayIcon.classList.add('fa-play');
        });

        // Inicializa todas las funciones de carga de datos cuando el DOM esté listo
        document.addEventListener('DOMContentLoaded', () => {
            loadNews();
            loadYouTubeVideos();
            loadPrograms();
            loadOtherFeatures();
        });
    </script>
</body>
</html>
