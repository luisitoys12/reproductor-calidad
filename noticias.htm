<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Noticias y Contenido - EKUSFM</title>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="manifest" href="manifest.json">
  <link rel="icon" type="image/png" href="icon.png">
  <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <style>
    /* --- Estilos Generales para la Página de Contenido --- */
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #0f172a; /* Fondo oscuro */
        color: #f8fafc; /* Texto claro */
        margin: 0;
        padding-top: 70px; /* Espacio para el mini-reproductor y el header */
        line-height: 1.6;
    }
    .header {
        background-color: #1e293b;
        padding: 15px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        position: fixed; /* Header fijo */
        top: 0;
        left: 0;
        right: 0;
        z-index: 9000; /* Menor que el reproductor para que esté debajo */
    }
    .header .logo {
        font-size: 1.5rem;
        font-weight: 700;
        color: #38bdf8;
    }
    .header .back-btn {
        background-color: #22d3ee;
        color: #1e293b;
        padding: 8px 15px;
        border-radius: 8px;
        text-decoration: none;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 5px;
        transition: background-color 0.3s ease;
    }
    .header .back-btn:hover {
        background-color: #06b6d4;
    }

    /* --- Estilos del Mini-Reproductor --- */
    .mini-player {
      position: fixed;
      top: 15px;
      left: 15px;
      width: 280px;
      background: url('https://images.pexels.com/photos/3082341/pexels-photo-3082341.jpeg') no-repeat center center;
      background-size: cover;
      filter: brightness(1.2); /* Ajusta el brillo si es necesario */
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.5);
      z-index: 10000; /* Asegura que esté por encima de todo */
      padding: 8px 12px;
      display: flex;
      align-items: center;
      gap: 10px;
      color: #fff;
      font-family: 'Poppins', Arial, sans-serif;
      position: relative;
      overflow: hidden;
    }
    .mini-player::before {
      content: "";
      position: absolute;
      top: 0; left: 0; right: 0; bottom: 0;
      background: rgba(0,0,0,0.5);
      z-index: 0;
      border-radius: 10px;
    }
    .mini-play-btn {
      background: #22d3ee;
      border: none;
      border-radius: 50%;
      width: 36px;
      height: 36px;
      color: #222;
      font-size: 1.2rem;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1;
      position: relative;
    }
    .mini-song-info {
      flex-grow: 1;
      overflow: hidden;
      z-index: 1;
      position: relative;
    }
    .mini-song-title {
      font-weight: 600;
      font-size: 0.9rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .mini-artist-name {
      font-size: 0.8rem;
      color: #38bdf8;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .mini-volume-control {
      width: 70px;
      cursor: pointer;
      z-index: 1;
      position: relative;
    }

    /* --- Contenido Principal de la Página --- */
    .content-wrapper {
        max-width: 1000px;
        margin: 20px auto;
        padding: 0 20px;
    }
    .page-title {
        color: #22d3ee;
        text-align: center;
        margin-bottom: 30px;
        font-size: 2.5rem;
    }
    .section-container {
        background-color: #1e293b;
        border-radius: 12px;
        padding: 30px;
        margin-bottom: 30px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.5);
    }
    .section-container h2 {
        color: #38bdf8;
        margin-top: 0;
        margin-bottom: 25px;
        text-align: center;
        font-size: 2rem;
    }

    /* --- Estilos para Noticias --- */
    #news-list .news-article {
        background-color: #2d3748;
        padding: 20px;
        margin-bottom: 15px;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
    }
    #news-list .news-article h3 {
        color: #22d3ee;
        margin-top: 0;
        font-size: 1.6rem;
    }
    #news-list .news-date {
        font-size: 0.9rem;
        color: #94a3b8;
        margin-bottom: 10px;
        display: block;
    }
    #news-list .news-content {
        white-space: pre-wrap; /* Mantiene los saltos de línea y espacios del textarea */
    }
    .no-data-message {
        text-align: center;
        color: #94a3b8;
        font-style: italic;
        padding: 20px;
    }

    /* --- Estilos para Videos (Top 10) --- */
    .videos-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 25px;
    }
    .video-card {
        background-color: #2d3748;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        text-align: center;
        display: flex;
        flex-direction: column;
        justify-content: space-between; /* Para empujar el footer hacia abajo */
    }
    .video-card iframe {
        width: 100%;
        height: 180px; /* Altura fija para los videos */
        border: none;
    }
    .video-card-info {
        padding: 15px;
    }
    .video-card h3 {
        color: #22d3ee;
        font-size: 1.3rem;
        margin-top: 0;
        margin-bottom: 5px;
    }
    .video-card p {
        font-size: 0.9rem;
        color: #94a3b8;
        margin-bottom: 0;
    }

    /* --- Estilos para Programas --- */
    .programs-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 25px;
    }
    .program-card {
        background-color: #2d3748;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
    .program-card h3 {
        color: #22d3ee;
        font-size: 1.5rem;
        margin-top: 0;
        margin-bottom: 10px;
    }
    .program-card .schedule {
        font-size: 0.95rem;
        color: #38bdf8;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 5px;
    }
    .program-card .description {
        font-size: 0.9rem;
        color: #cbd5e1;
    }

    /* --- Estilos para Funciones / Características --- */
    .features-list {
        list-style: none;
        padding: 0;
    }
    .features-list li {
        background-color: #2d3748;
        padding: 15px 20px;
        margin-bottom: 10px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        display: flex;
        align-items: center;
        gap: 15px;
    }
    .features-list li .material-icons {
        color: #22d3ee;
        font-size: 28px;
    }
    .features-list li strong {
        color: #38bdf8;
        font-size: 1.1rem;
    }

  </style>
    <script>
    (function() {
      var host = window.location.hostname;
      var dominiosPermitidos = [
        "estacionkusmedios.com",
        "reproductor-calidad.vercel.app"
      ];
      var esSubdominioEKUS = host.endsWith(".estacionkusmedios.com");
      var esDominioValido = dominiosPermitidos.includes(host) || esSubdominioEKUS;
      if (!esDominioValido) {
        document.documentElement.innerHTML = `
          <head>
            <meta charset="UTF-8">
            <title>Acceso no autorizado</title>
            <style>
              body { 
                font-family: 'Poppins', Arial, sans-serif; 
                background: #181e2a; color: #fff; 
                text-align: center; 
                margin: 0; 
                padding: 0;
                display: flex;
                flex-direction: column;
                justify-content: center;
                min-height: 100vh;
                }
              h1 { font-size: 2.4em; margin-top: 2em; color: #38bdf8;}
              p { color: #ddd; }
            </style>
          </head>
          <body>
            <h1>Acceso no autorizado</h1>
            <p>Este sitio solo puede visualizarse en <b>estacionkusmedios.com</b> y sus subdominios, o en <b>reproductor-calidad.vercel.app</b>.</p>
          </body>
        `;
        throw new Error('Unauthorized access');
      }
    })();
  </script>

  <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-database-compat.js"></script>

</head>
<body>
  <div id="mini-reproductor" class="mini-player">
    <button id="playPauseMiniBtn" class="mini-play-btn" title="Play/Pause">
      <i id="miniPlayIcon" class="fa-solid fa-play"></i>
    </button>
    <div class="mini-song-info">
      <div id="miniSongTitle" class="mini-song-title">Cargando programa...</div>
      <div id="miniArtistName" class="mini-artist-name"></div>
    </div>
    <input type="range" id="miniVolumeControl" class="mini-volume-control" min="0" max="1" step="0.01" value="1" title="Volume" />
    <audio id="audio-mini" preload="auto" crossorigin="anonymous"></audio>
  </div>

  <div class="header">
    <div class="logo">
      EKUSMEDIOS
    </div>
    <a href="index.htm" class="back-btn">
      <i class="fas fa-arrow-left"></i> Volver
    </a>
  </div>

  <div class="content-wrapper">
    <h1 class="page-title">Contenido de EKUSFM</h1>

        <div class="section-container">
      <h2>Últimas Noticias</h2>
      <div id="news-list">
        <p class="no-data-message">Cargando noticias...</p>
      </div>
    </div>

        <div class="section-container">
      <h2>Top 10 Canciones</h2>
      <div id="videos-list" class="videos-grid">
        <p class="no-data-message">Cargando videos...</p>
      </div>
    </div>

        <div class="section-container">
      <h2>Nuestros Programas</h2>
      <div id="programs-list" class="programs-grid">
        <p class="no-data-message">Cargando programas...</p>
      </div>
    </div>

        <div class="section-container">
      <h2>Funciones Destacadas</h2>
      <ul id="features-list" class="features-list">
        <p class="no-data-message">Cargando funciones...</p>
      </ul>
    </div>

  </div>   
  <script>
    // *** TU CONFIGURACIÓN DE FIREBASE (¡CÓPIALA EXACTAMENTE DE TU CONSOLA!) ***
    const firebaseConfig = {
        apiKey: "AIzaSyBHlQ6WQauQLTbvp_iHbkWZ8Bhv3fntSpM",
        authDomain: "ekusfm-d1a9d.firebaseapp.com",
        databaseURL: "https://ekusfm-d1a9d-default-rtdb.firebaseio.com",
        projectId: "ekusfm-d1a9d",
        storageBucket: "ekusfm-d1a9d.firebasestorage.app",
        messagingSenderId: "849619346647",
        appId: "1:849619346647:web:06559451c66950d9b03c92",
        measurementId: "G-X59DPNG6N4"
    };

    // Inicializa Firebase solo si no está ya inicializado
    if (!firebase.apps.length) {
        firebase.initializeApp(firebaseConfig);
    }

    const database = firebase.database();

    // --- Lógica del Mini-Reproductor ---
    const AUDIO_STREAM_URL = "https://radio.trabullnetwork.pro/listen/esmerosound/radio.mp3";
    const audioMini = document.getElementById('audio-mini');
    audioMini.src = AUDIO_STREAM_URL;
    audioMini.crossOrigin = "anonymous";
    audioMini.volume = 1;

    const playPauseMiniBtn = document.getElementById('playPauseMiniBtn');
    const miniPlayIcon = document.getElementById('miniPlayIcon');
    const miniSongTitle = document.getElementById('miniSongTitle');
    const miniArtistName = document.getElementById('miniArtistName');
    const miniVolumeControl = document.getElementById('miniVolumeControl');

    playPauseMiniBtn.addEventListener('click', function() {
        if (audioMini.paused) {
            audioMini.play();
        } else {
            audioMini.pause();
        }
    });
    audioMini.addEventListener('play', function() {
        miniPlayIcon.classList.remove('fa-play');
        miniPlayIcon.classList.add('fa-pause');
    });
    audioMini.addEventListener('pause', function() {
        miniPlayIcon.classList.remove('fa-pause');
        miniPlayIcon.classList.add('fa-play');
    });
    miniVolumeControl.addEventListener('input', function() {
        audioMini.volume = this.value;
    });

    // --- Lógica para obtener el programa actual de Firebase (sin cambios relevantes) ---
    function getDayOfWeek(date) {
        const days = ['Domingo', 'Lunes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado']; // Ojo: "Martes" faltaba, corregido abajo
        return days[date.getDay()];
    }

    function parseTime(timeStr) {
        const [hourStr, minuteStr] = timeStr.split(':');
        const hour = parseInt(hourStr);
        const minute = parseInt(minuteStr);
        return hour * 60 + minute; // Tiempo en minutos desde la medianoche
    }

    function convertTo24Hour(timeStr) {
        if (!/\s*(AM|PM)/i.test(timeStr)) {
            return timeStr.replace(/\s*(AM|PM)/i, '');
        }
        let [time, modifier] = timeStr.split(' ');
        let [hours, minutes] = time.split(':');
        if (hours === '12') {
            hours = '00';
        }
        if (modifier && modifier.toLowerCase() === 'pm') {
            hours = parseInt(hours, 10) + 12;
        }
        return `${hours}:${minutes}`;
    }

    function checkCurrentProgram() {
        const now = new Date();
        const currentDay = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'][now.getDay()]; // Asegura todos los días
        const currentTimeInMinutes = now.getHours() * 60 + now.getMinutes();

        database.ref('programas').once('value')
            .then(snapshot => {
                if (snapshot.exists()) {
                    const programs = snapshot.val();
                    let foundProgram = null;

                    for (let key in programs) {
                        if (programs.hasOwnProperty(key)) {
                            const program = programs[key];
                            const schedule = program.schedule;

                            const dayMatch = schedule.match(/^(.*?)\s*(\d{1,2}:\d{2}\s*(AM|PM)?\s*-\s*\d{1,2}:\d{2}\s*(AM|PM)?)$/i);
                            
                            if (!dayMatch || dayMatch.length < 3) continue;

                            let daysPart = dayMatch[1].trim();
                            let timePartStr = dayMatch[2].trim();

                            let [startTimeStr, endTimeStr] = timePartStr.split(' - ');

                            startTimeStr = convertTo24Hour(startTimeStr);
                            endTimeStr = convertTo24Hour(endTimeStr);

                            const programStartTime = parseTime(startTimeStr);
                            const programEndTime = parseTime(endTimeStr);

                            const daysOfWeek = [];
                            if (daysPart.includes('Lunes a Viernes')) {
                                daysOfWeek.push('Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes');
                            } else if (daysPart.includes('Sábados y Domingos')) {
                                daysOfWeek.push('Sábado', 'Domingo');
                            } else {
                                daysPart.split(/,|\s+y\s+/).forEach(dayRange => {
                                    const trimmedDayRange = dayRange.trim();
                                    if (trimmedDayRange.includes('a')) {
                                        const [startDay, endDay] = trimmedDayRange.split('a').map(d => d.trim());
                                        const allDays = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo'];
                                        const startIndex = allDays.indexOf(startDay);
                                        const endIndex = allDays.indexOf(endDay);
                                        if (startIndex !== -1 && endIndex !== -1) {
                                            for (let i = startIndex; i <= endIndex; i++) {
                                                daysOfWeek.push(allDays[i]);
                                            }
                                        }
                                    } else if (trimmedDayRange) {
                                        daysOfWeek.push(trimmedDayRange);
                                    }
                                });
                            }
                            
                            const formattedDaysOfWeek = daysOfWeek.map(d => {
                                let day = d.charAt(0).toUpperCase() + d.slice(1).toLowerCase();
                                return day.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
                            });

                            let isOvernight = programEndTime < programStartTime;
                            let isCurrentDay = formattedDaysOfWeek.includes(currentDay);

                            if (isCurrentDay) {
                                if (isOvernight) {
                                    if (currentTimeInMinutes >= programStartTime || currentTimeInMinutes < programEndTime) {
                                        foundProgram = program;
                                        break;
                                    }
                                } else {
                                    if (currentTimeInMinutes >= programStartTime && currentTimeInMinutes < programEndTime) {
                                        foundProgram = program;
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    if (foundProgram) {
                        miniSongTitle.textContent = foundProgram.name;
                        miniArtistName.textContent = foundProgram.schedule;
                    } else {
                        miniSongTitle.textContent = "¡Sintoniza EKUSFM!";
                        miniArtistName.textContent = "La mejor música y contenido";
                    }
                } else {
                    miniSongTitle.textContent = "¡Sintoniza EKUSFM!";
                    miniArtistName.textContent = "Cargando programación...";
                }
            })
            .catch(error => {
                console.error("Error al cargar programas para mini-reproductor:", error);
                miniSongTitle.textContent = "Error de carga";
                miniArtistName.textContent = "Intenta recargar";
            });
    }

    checkCurrentProgram();
    setInterval(checkCurrentProgram, 60 * 1000); // Actualiza cada 1 minuto

    // --- Funciones para cargar datos de Firebase y mostrarlos ---

    const newsListDiv = document.getElementById('news-list');
    const videosListDiv = document.getElementById('videos-list');
    const programsListDiv = document.getElementById('programs-list');
    const featuresListUl = document.getElementById('features-list');

    function loadNews() {
        newsListDiv.innerHTML = '<p class="no-data-message">Cargando noticias...</p>';
        database.ref('noticias').orderByChild('date').once('value')
            .then(snapshot => {
                newsListDiv.innerHTML = ''; // Limpiar mensaje de carga
                if (!snapshot.exists() || snapshot.val() === null) {
                    newsListDiv.innerHTML = '<p class="no-data-message">No hay noticias disponibles en este momento.</p>';
                    return;
                }
                const newsData = snapshot.val();
                const sortedNews = [];
                for (let key in newsData) {
                    if (newsData.hasOwnProperty(key)) {
                        sortedNews.push({ id: key, ...newsData[key] });
                    }
                }
                sortedNews.sort((a, b) => b.date - a.date); // Más reciente primero

                sortedNews.forEach(newsItem => {
                    const articleDiv = document.createElement('div');
                    articleDiv.className = 'news-article';
                    articleDiv.innerHTML = `
                        <h3>${newsItem.title}</h3>
                        <span class="news-date">${new Date(newsItem.date).toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' })}</span>
                        <p class="news-content">${newsItem.content}</p>
                    `;
                    newsListDiv.appendChild(articleDiv);
                });
            })
            .catch(error => {
                console.error("Error al cargar noticias:", error);
                newsListDiv.innerHTML = '<p class="no-data-message">Error al cargar las noticias.</p>';
            });
    }

    function loadVideos() {
        videosListDiv.innerHTML = '<p class="no-data-message">Cargando videos...</p>';
        database.ref('top10videos').orderByChild('rank').once('value')
            .then(snapshot => {
                videosListDiv.innerHTML = ''; // Limpiar mensaje de carga
                if (!snapshot.exists() || snapshot.val() === null) {
                    videosListDiv.innerHTML = '<p class="no-data-message">No hay videos en el Top 10 disponibles.</p>';
                    return;
                }
                const videosData = snapshot.val();
                const sortedVideos = [];
                for (let key in videosData) {
                    if (videosData.hasOwnProperty(key)) {
                        sortedVideos.push({ id: key, ...videosData[key] });
                    }
                }
                sortedVideos.sort((a, b) => a.rank - b.rank); // Por ranking ascendente

                sortedVideos.forEach(videoItem => {
                    const videoCard = document.createElement('div');
                    videoCard.className = 'video-card';
                    videoCard.innerHTML = `
                        <iframe src="https://www.youtube.com/embed/${videoItem.videoId}?controls=0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen loading="lazy"></iframe>
                        <div class="video-card-info">
                            <h3>#${videoItem.rank} - ${videoItem.title}</h3>
                            <p>ID: ${videoItem.videoId}</p>
                        </div>
                    `;
                    videosListDiv.appendChild(videoCard);
                });
            })
            .catch(error => {
                console.error("Error al cargar videos:", error);
                videosListDiv.innerHTML = '<p class="no-data-message">Error al cargar los videos del Top 10.</p>';
            });
    }

    function loadPrograms() {
        programsListDiv.innerHTML = '<p class="no-data-message">Cargando programas...</p>';
        database.ref('programas').orderByChild('name').once('value')
            .then(snapshot => {
                programsListDiv.innerHTML = ''; // Limpiar mensaje de carga
                if (!snapshot.exists() || snapshot.val() === null) {
                    programsListDiv.innerHTML = '<p class="no-data-message">No hay programas disponibles en este momento.</p>';
                    return;
                }
                const programsData = snapshot.val();
                const sortedPrograms = [];
                for (let key in programsData) {
                    if (programsData.hasOwnProperty(key)) {
                        sortedPrograms.push({ id: key, ...programsData[key] });
                    }
                }
                sortedPrograms.sort((a, b) => a.name.localeCompare(b.name)); // Orden alfabético por nombre

                sortedPrograms.forEach(programItem => {
                    const programCard = document.createElement('div');
                    programCard.className = 'program-card';
                    programCard.innerHTML = `
                        <h3>${programItem.name}</h3>
                        <p class="schedule"><span class="material-icons">schedule</span> ${programItem.schedule}</p>
                        <p class="description">${programItem.description || 'Sin descripción.'}</p>
                    `;
                    programsListDiv.appendChild(programCard);
                });
            })
            .catch(error => {
                console.error("Error al cargar programas:", error);
                programsListDiv.innerHTML = '<p class="no-data-message">Error al cargar los programas.</p>';
            });
    }

    function loadFeatures() {
        featuresListUl.innerHTML = '<p class="no-data-message">Cargando funciones...</p>';
        database.ref('features').orderByChild('order').once('value')
            .then(snapshot => {
                featuresListUl.innerHTML = ''; // Limpiar mensaje de carga
                if (!snapshot.exists() || snapshot.val() === null) {
                    featuresListUl.innerHTML = '<p class="no-data-message">No hay funciones destacadas disponibles.</p>';
                    return;
                }
                const featuresData = snapshot.val();
                const sortedFeatures = [];
                for (let key in featuresData) {
                    if (featuresData.hasOwnProperty(key)) {
                        sortedFeatures.push({ id: key, ...featuresData[key] });
                    }
                }
                sortedFeatures.sort((a, b) => a.order - b.order); // Por orden

                sortedFeatures.forEach(featureItem => {
                    const listItem = document.createElement('li');
                    // Puedes decidir qué icono usar o si lo harás dinámico desde la DB
                    // Por ahora, un icono genérico o un icono de material design
                    listItem.innerHTML = `
                        <span class="material-icons">star</span> 
                        <strong>${featureItem.name}</strong>
                    `;
                    featuresListUl.appendChild(listItem);
                });
            })
            .catch(error => {
                console.error("Error al cargar funciones:", error);
                featuresListUl.innerHTML = '<p class="no-data-message">Error al cargar las funciones destacadas.</p>';
            });
    }

    // Cargar todos los datos al cargar la página
    document.addEventListener('DOMContentLoaded', () => {
        loadNews();
        loadVideos();
        loadPrograms();
        loadFeatures();
    });

  </script>
</body>
</html>
