<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Noticias y Contenido - EKUSFM</title>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="manifest" href="manifest.json">
  <link rel="icon" type="image/png" href="icon.png">
  <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <style>
    /* --- Estilos Generales para la Página de Contenido --- */
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #0f172a; /* Fondo oscuro */
        color: #f8fafc; /* Texto claro */
        margin: 0;
        padding-top: 70px; /* Espacio para el mini-reproductor y el header */
        line-height: 1.6;
    }
    .header {
        background-color: #1e293b;
        padding: 15px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        position: fixed; /* Header fijo */
        top: 0;
        left: 0;
        right: 0;
        z-index: 9000; /* Menor que el reproductor para que esté debajo */
    }
    .header .logo {
        font-size: 1.5rem;
        font-weight: 700;
        color: #38bdf8;
    }
    .header .back-btn {
        background-color: #22d3ee;
        color: #1e293b;
        padding: 8px 15px;
        border-radius: 8px;
        text-decoration: none;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 5px;
        transition: background-color 0.3s ease;
    }
    .header .back-btn:hover {
        background-color: #06b6d4;
    }

    /* --- Nuevo Diseño del Mini-Reproductor --- */
    #mini-reproductor {
        position: fixed;
        top: 15px;
        left: 15px;
        width: 320px; /* Ancho un poco más grande */
        background: #1e293b; /* Color de fondo sólido */
        border-radius: 15px; /* Bordes más redondeados */
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.6);
        z-index: 10000;
        padding: 12px;
        display: flex;
        align-items: center;
        gap: 12px;
        color: #fff;
        font-family: 'Poppins', Arial, sans-serif;
        border: 1px solid #38bdf8; /* Borde sutil */
        transition: all 0.3s ease; /* Transición suave para cambios de estado */
    }

    #mini-reproductor:hover {
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.8);
        transform: translateY(-2px);
    }

    #mini-reproductor.playing {
        /* Estilo cuando está reproduciendo */
        background: linear-gradient(135deg, #1e293b, #334155);
    }

    .player-controls {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .mini-play-btn {
        background: #22d3ee;
        border: none;
        border-radius: 50%;
        width: 45px; /* Más grande */
        height: 45px;
        color: #1e293b; /* Texto oscuro para contraste */
        font-size: 1.5rem; /* Icono más grande */
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.4);
        transition: background-color 0.3s ease, transform 0.2s ease;
    }
    .mini-play-btn:hover {
        background-color: #06b6d4;
        transform: scale(1.05);
    }
    .mini-play-btn:active {
        transform: scale(0.95);
    }

    .mini-info-and-volume {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
        overflow: hidden;
    }

    .mini-song-title {
        font-weight: 600;
        font-size: 1rem; /* Más grande */
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        margin-bottom: 2px;
        color: #f8fafc;
    }
    .mini-artist-name {
        font-size: 0.85rem; /* Ligeramente más grande */
        color: #94a3b8; /* Tono más suave */
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    .mini-artist-name.program-info {
        color: #38bdf8; /* Azul para resaltar el horario del programa */
        font-weight: 500;
    }

    .mini-volume-control-container {
        display: flex;
        align-items: center;
        gap: 5px;
        margin-top: 8px; /* Espacio entre info y volumen */
    }
    .mini-volume-control-container .material-icons {
        font-size: 1.2rem;
        color: #94a3b8;
    }
    .mini-volume-control {
        -webkit-appearance: none;
        width: 100%; /* Ocupa el ancho disponible */
        height: 4px; /* Más delgado */
        background: #475569; /* Color de la pista */
        border-radius: 2px;
        outline: none;
        cursor: pointer;
    }
    .mini-volume-control::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 14px; /* Tamaño del thumb */
        height: 14px;
        border-radius: 50%;
        background: #22d3ee; /* Color del thumb */
        cursor: pointer;
        box-shadow: 0 0 5px rgba(0,0,0,0.3);
    }
    .mini-volume-control::-moz-range-thumb {
        width: 14px;
        height: 14px;
        border-radius: 50%;
        background: #22d3ee;
        cursor: pointer;
        box-shadow: 0 0 5px rgba(0,0,0,0.3);
    }

    .audio-loader {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 3px;
        background-color: #06b6d4; /* Color de la barra de carga */
        transform-origin: left;
        transform: scaleX(0);
        transition: transform 0.1s linear; /* Transición para un movimiento suave */
        border-bottom-left-radius: 15px; /* Bordes para coincidir con el reproductor */
        border-bottom-right-radius: 15px;
    }
    .audio-loader.loading {
        /* Animación para indicar carga si no hay progress */
        animation: loading-pulse 1.5s infinite ease-in-out;
    }

    @keyframes loading-pulse {
        0% { transform: scaleX(0); opacity: 0.5; }
        50% { transform: scaleX(0.7); opacity: 1; }
        100% { transform: scaleX(0); opacity: 0.5; }
    }


    /* --- Contenido Principal de la Página (los mismos estilos anteriores) --- */
    .content-wrapper {
        max-width: 1000px;
        margin: 20px auto;
        padding: 0 20px;
    }
    .page-title {
        color: #22d3ee;
        text-align: center;
        margin-bottom: 30px;
        font-size: 2.5rem;
    }
    .section-container {
        background-color: #1e293b;
        border-radius: 12px;
        padding: 30px;
        margin-bottom: 30px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.5);
    }
    .section-container h2 {
        color: #38bdf8;
        margin-top: 0;
        margin-bottom: 25px;
        text-align: center;
        font-size: 2rem;
    }

    /* --- Estilos para Noticias con Imágenes --- */
    #news-list .news-article {
        background-color: #2d3748;
        padding: 20px;
        margin-bottom: 15px;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        transition: background-color 0.3s ease;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
    #news-list .news-article:hover {
        background-color: #3b4555;
    }
    #news-list .news-article img {
        width: 100%;
        max-height: 200px;
        object-fit: cover;
        border-radius: 8px;
        margin-bottom: 15px;
    }
    #news-list .news-article h3 {
        color: #22d3ee;
        margin-top: 0;
        font-size: 1.6rem;
    }
    #news-list .news-date {
        font-size: 0.9rem;
        color: #94a3b8;
        margin-bottom: 10px;
        display: block;
    }
    #news-list .news-content {
        white-space: pre-wrap;
        max-height: 80px; 
        overflow: hidden; 
        text-overflow: ellipsis; 
        margin-bottom: 15px; 
    }
    .news-article .read-more-btn {
        align-self: flex-end; 
        background-color: #38bdf8;
        color: #1e293b;
        padding: 8px 15px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        transition: background-color 0.3s ease;
        text-decoration: none; 
        display: inline-block; 
    }
    .news-article .read-more-btn:hover {
        background-color: #06b6d4;
    }
    .no-data-message {
        text-align: center;
        color: #94a3b8;
        font-style: italic;
        padding: 20px;
    }

    /* --- ESTILOS PARA EL NUEVO DISEÑO DE TOP 10 VIDEOS/CANCIONES --- */
    .videos-grid-container {
        /* Contenedor para el grid y el botón */
        display: flex;
        flex-direction: column;
        gap: 20px; /* Espacio entre el grid y el botón */
    }
    .videos-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 30px;
        padding: 10px;
        /* Estilos para el scroll */
        max-height: 500px; /* Altura máxima antes de que aparezca el scroll */
        overflow-y: auto; /* Habilita el scroll vertical */
        padding-right: 15px; /* Espacio para la barra de scroll */
    }

    /* Estilo de la barra de desplazamiento (para navegadores Webkit como Chrome, Safari) */
    .videos-grid::-webkit-scrollbar {
        width: 8px; /* Ancho de la barra */
    }

    .videos-grid::-webkit-scrollbar-track {
        background: #1e293b; /* Fondo de la pista */
        border-radius: 10px;
    }

    .videos-grid::-webkit-scrollbar-thumb {
        background-color: #38bdf8; /* Color del "pulgar" de la barra */
        border-radius: 10px;
        border: 2px solid #1e293b; /* Borde alrededor del pulgar */
    }

    .videos-grid::-webkit-scrollbar-thumb:hover {
        background-color: #22d3ee; /* Color al pasar el ratón */
    }
    
    .video-card {
        background-color: #2d3748;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 6px 20px rgba(0,0,0,0.4);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        border: 1px solid #334155;
    }
    .video-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 10px 30px rgba(0,0,0,0.6);
    }
    .video-card iframe {
        width: 100%;
        height: 200px;
        border: none;
        border-bottom: 1px solid #334155;
    }
    .video-card-info {
        padding: 20px;
        text-align: center;
    }
    .video-card h3 {
        color: #22d3ee;
        font-size: 1.5rem;
        margin-top: 0;
        margin-bottom: 10px;
        line-height: 1.3;
    }
    .video-card .video-rank {
        font-size: 1.1rem;
        font-weight: 700;
        color: #38bdf8;
        margin-bottom: 8px;
        display: block;
    }
    .video-card p {
        font-size: 0.95rem;
        color: #94a3b8;
        margin-bottom: 0;
    }

    .show-more-btn-container {
        text-align: center;
        margin-top: 20px; /* Espacio entre el grid y el botón */
    }
    .show-more-btn {
        background-color: #38bdf8;
        color: #1e293b;
        padding: 12px 25px;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        font-weight: 700;
        font-size: 1.1rem;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }
    .show-more-btn:hover {
        background-color: #06b6d4;
        transform: translateY(-2px);
    }
    .show-more-btn:active {
        transform: translateY(0);
    }


    /* --- Estilos para Programas --- */
    .programs-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 25px;
    }
    .program-card {
        background-color: #2d3748;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
    .program-card h3 {
        color: #22d3ee;
        font-size: 1.5rem;
        margin-top: 0;
        margin-bottom: 10px;
    }
    .program-card .schedule {
        font-size: 0.95rem;
        color: #38bdf8;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 5px;
    }
    .program-card .description {
        font-size: 0.9rem;
        color: #cbd5e1;
    }

    /* --- Estilos para Funciones / Características --- */
    .features-list {
        list-style: none;
        padding: 0;
    }
    .features-list li {
        background-color: #2d3748;
        padding: 15px 20px;
        margin-bottom: 10px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        display: flex;
        align-items: center;
        gap: 15px;
    }
    .features-list li .material-icons {
        color: #22d3ee;
        font-size: 28px;
    }
    .features-list li strong {
        color: #38bdf8;
        font-size: 1.1rem;
    }

    /* --- Estilos para el Modal Pop-up de Noticias --- */
    .modal {
        display: none; 
        position: fixed; 
        z-index: 10001; 
        left: 0;
        top: 0;
        width: 100%; 
        height: 100%; 
        overflow: auto; 
        background-color: rgba(0,0,0,0.7); 
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
    }

    .modal.show {
        display: flex;
        opacity: 1;
    }

    .modal-content {
        background-color: #1e293b; 
        margin: auto;
        padding: 30px;
        border-radius: 15px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.8);
        max-width: 700px; 
        width: 90%; 
        position: relative;
        transform: translateY(-50px); 
        transition: transform 0.3s ease-in-out;
        color: #f8fafc;
        max-height: 80vh; 
        overflow-y: auto; 
    }

    .modal.show .modal-content {
        transform: translateY(0); 
    }

    .modal-content h2 {
        color: #22d3ee;
        margin-top: 0;
        font-size: 2rem;
        margin-bottom: 10px;
    }

    .modal-content .modal-date {
        font-size: 0.95rem;
        color: #94a3b8;
        margin-bottom: 20px;
        display: block;
    }

    .modal-content .modal-image {
        width: 100%;
        max-height: 350px;
        object-fit: cover;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    .modal-content p {
        font-size: 1rem;
        line-height: 1.7;
        white-space: pre-wrap; 
    }

    .close-button {
        color: #fff;
        position: absolute;
        top: 15px;
        right: 25px;
        font-size: 30px;
        font-weight: bold;
        cursor: pointer;
        transition: color 0.3s ease;
    }

    .close-button:hover,
    .close-button:focus {
        color: #22d3ee;
        text-decoration: none;
        cursor: pointer;
    }
  </style>

    <script>
    (function() {
      var host = window.location.hostname;
      var dominiosPermitidos = [
        "estacionkusmedios.com",
        "reproductor-calidad.vercel.app"
      ];
      var esSubdominioEKUS = host.endsWith(".estacionkusmedios.com");
      var esDominioValido = dominiosPermitidos.includes(host) || esSubdominioEKUS;
      if (!esDominioValido) {
        document.documentElement.innerHTML = `
          <head>
            <meta charset="UTF-8">
            <title>Acceso no autorizado</title>
            <style>
              body { 
                font-family: 'Poppins', Arial, sans-serif; 
                background: #181e2a; color: #fff; 
                text-align: center; 
                margin: 0; 
                padding: 0;
                display: flex;
                flex-direction: column;
                justify-content: center;
                min-height: 100vh;
                }
              h1 { font-size: 2.4em; margin-top: 2em; color: #38bdf8;}
              p { color: #ddd; }
            </style>
          </head>
          <body>
            <h1>Acceso no autorizado</h1>
            <p>Este sitio solo puede visualizarse en <b>estacionkusmedios.com</b> y sus subdominios, o en <b>reproductor-calidad.vercel.app</b>.</p>
          </body>
        `;
        throw new Error('Unauthorized access');
      }
    })();
  </script>

  <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-database-compat.js"></script>

</head>
<body>
  <div id="mini-reproductor">
    <div class="player-controls">
        <button id="playPauseMiniBtn" class="mini-play-btn" title="Reproducir/Pausar">
            <i id="miniPlayIcon" class="fa-solid fa-play"></i>
        </button>
    </div>
    <div class="mini-info-and-volume">
        <div id="miniSongTitle" class="mini-song-title">Cargando...</div>
        <div id="miniArtistName" class="mini-artist-name"></div>
        <div class="mini-volume-control-container">
            <i class="material-icons">volume_down</i>
            <input type="range" id="miniVolumeControl" class="mini-volume-control" min="0" max="1" step="0.01" value="1" title="Volumen" />
            <i class="material-icons">volume_up</i>
        </div>
    </div>
    <audio id="audio-mini" preload="auto" crossorigin="anonymous"></audio>
    <div id="audioLoader" class="audio-loader"></div>
  </div>

  <div class="header">
    <div class="logo">
      EKUSMEDIOS
    </div>
    <a href="index.htm" class="back-btn">
      <i class="fas fa-arrow-left"></i> Volver
    </a>
  </div>

  <div class="content-wrapper">
    <h1 class="page-title">Contenido de EKUSFM</h1>

        <div class="section-container">
      <h2>Últimas Noticias</h2>
      <div id="news-list">
        <p class="no-data-message">Cargando noticias...</p>
      </div>
    </div>

    <div id="newsModal" class="modal">
        <div class="modal-content">
            <span class="close-button">×</span>
            <img id="modalNewsImage" class="modal-image" src="" alt="Imagen de la Noticia" style="display: none;">
            <h2 id="modalNewsTitle"></h2>
            <span id="modalNewsDate" class="modal-date"></span>
            <p id="modalNewsContent"></p>
        </div>
    </div>

        <div class="section-container">
      <h2>Top 10 Canciones</h2>
      <div class="videos-grid-container">
        <div id="videos-list" class="videos-grid">
          <p class="no-data-message">Cargando videos...</p>
        </div>
        <div id="show-more-videos-container" class="show-more-btn-container" style="display: none;">
            <button id="showMoreVideosBtn" class="show-more-btn">Ver más canciones</button>
        </div>
      </div>
    </div>

        <div class="section-container">
      <h2>Nuestros Programas</h2>
      <div id="programs-list" class="programs-grid">
        <p class="no-data-message">Cargando programas...</p>
      </div>
    </div>

        <div class="section-container">
      <h2>Funciones Destacadas</h2>
      <ul id="features-list" class="features-list">
        <p class="no-data-message">Cargando funciones...</p>
      </ul>
    </div>

  </div>   
  <script>
    // *** TU CONFIGURACIÓN DE FIREBASE (¡CÓPIALA EXACTAMENTE DE TU CONSOLA!) ***
    const firebaseConfig = {
        apiKey: "AIzaSyBHlQ6WQauQLTbvp_iHbkWZ8Bhv3fntSpM",
        authDomain: "ekusfm-d1a9d.firebaseapp.com",
        databaseURL: "https://ekusfm-d1a9d-default-rtdb.firebaseio.com",
        projectId: "ekusfm-d1a9d",
        storageBucket: "ekusfm-d1a9d.firebasestorage.app",
        messagingSenderId: "849619346647",
        appId: "1:849619346647:web:06559451c66950d9b03c92",
        measurementId: "G-X59DPNG6N4"
    };

    // Inicializa Firebase solo si no está ya inicializado
    if (!firebase.apps.length) {
        firebase.initializeApp(firebaseConfig);
    }

    const database = firebase.database();

    // --- Configuración del Stream y AzuraCast ---
    const AUDIO_STREAM_URL = "https://radio.trabullnetwork.pro/listen/esmerosound/radio.mp3";
    const AZURACAST_API_URL = "https://radio.trabullnetwork.pro/api/live/nowplaying/esmerosound"; 
    
    const audioMini = document.getElementById('audio-mini');
    const miniReproductorDiv = document.getElementById('mini-reproductor');
    const miniPlayIcon = document.getElementById('miniPlayIcon');
    const miniSongTitle = document.getElementById('miniSongTitle');
    const miniArtistName = document.getElementById('miniArtistName');
    const miniVolumeControl = document.getElementById('miniVolumeControl');
    const audioLoader = document.getElementById('audioLoader');

    audioMini.src = AUDIO_STREAM_URL;
    audioMini.crossOrigin = "anonymous";
    audioMini.volume = 0.7; // Establece un volumen inicial predeterminado
    miniVolumeControl.value = 0.7; // Sincroniza el slider con el volumen inicial

    // --- Controles de Reproducción ---
    document.getElementById('playPauseMiniBtn').addEventListener('click', function() {
        if (audioMini.paused) {
            audioMini.play();
        } else {
            audioMini.pause();
        }
    });

    audioMini.addEventListener('play', () => {
        miniPlayIcon.classList.replace('fa-play', 'fa-pause');
        miniReproductorDiv.classList.add('playing');
        audioLoader.classList.remove('loading'); 
    });

    audioMini.addEventListener('pause', () => {
        miniPlayIcon.classList.replace('fa-pause', 'fa-play');
        miniReproductorDiv.classList.remove('playing');
        audioLoader.style.transform = 'scaleX(0)'; 
    });

    miniVolumeControl.addEventListener('input', function() {
        audioMini.volume = parseFloat(this.value);
    });

    // --- Manejo de la barra de progreso de carga ---
    audioMini.addEventListener('waiting', () => {
        audioLoader.classList.add('loading'); 
    });

    audioMini.addEventListener('playing', () => {
        audioLoader.classList.remove('loading'); 
    });

    audioMini.addEventListener('progress', () => {
        if (audioMini.duration > 0) {
            const buffered = audioMini.buffered.end(audioMini.buffered.length - 1);
            const percentage = (buffered / audioMini.duration) * 100;
            audioLoader.style.transform = `scaleX(${percentage / 100})`;
            audioLoader.classList.remove('loading'); 
        }
    });
    // Fallback para streams en vivo sin duración conocida
    audioMini.addEventListener('stalled', () => {
        audioLoader.classList.add('loading'); 
    });


    // --- Lógica de AzuraCast y Firebase para Metadatos ---
    let currentAzuraCastData = { title: "EKUSFM", artist: "La mejor música y contenido" };

    async function fetchAzuraCastMetadata() {
        try {
            const response = await fetch(AZURACAST_API_URL);
            if (!response.ok) {
                // Si la respuesta no es OK (ej. 404, 500), lanzar un error
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            
            // Verifica la estructura de la respuesta de AzuraCast
            if (Array.isArray(data) && data.length > 0 && data[0].now_playing && data[0].now_playing.song) {
                const nowPlaying = data[0].now_playing.song;
                currentAzuraCastData.title = nowPlaying.title || "Sin título";
                currentAzuraCastData.artist = nowPlaying.artist || "Artista Desconocido";
            } else if (data.now_playing && data.now_playing.song) {
                // Para el caso en que no es un array, pero tiene la misma estructura interna
                const nowPlaying = data.now_playing.song;
                currentAzuraCastData.title = nowPlaying.title || "Sin título";
                currentAzuraCastData.artist = nowPlaying.artist || "Artista Desconocido";
            }
            else {
                console.warn("No se encontraron datos de canción/artista en la respuesta de AzuraCast con la estructura esperada.");
                currentAzuraCastData = { title: "EKUSFM", artist: "Cargando metadatos..." };
            }
        } catch (error) {
            console.error("Error al obtener metadatos de AzuraCast:", error);
            // Establece un mensaje de error claro en el reproductor
            currentAzuraCastData = { title: "EKUSFM", artist: "Error al cargar metadatos" }; 
        } finally {
            // Aseguramos que la pantalla se actualice con la información disponible o el error
            updateMiniPlayerDisplay(); 
        }
    }

    // Funciones auxiliares para determinar el programa actual
    function getDayOfWeek(date) {
        const days = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'];
        return days[date.getDay()];
    }

    function parseTime(timeStr) {
        const [hourStr, minuteStr] = timeStr.split(':');
        const hour = parseInt(hourStr);
        const minute = parseInt(minuteStr);
        return hour * 60 + minute;
    }

    function convertTo24Hour(timeStr) {
        if (!/\s*(AM|PM)/i.test(timeStr)) {
            return timeStr.replace(/\s*(AM|PM)/i, '');
        }
        let [time, modifier] = timeStr.split(' ');
        let [hours, minutes] = time.split(':');
        if (hours === '12') {
            hours = '00';
        }
        if (modifier && modifier.toLowerCase() === 'pm') {
            hours = parseInt(hours, 10) + 12;
        }
        return `${hours}:${minutes}`;
    }

    async function updateMiniPlayerDisplay() {
        const now = new Date();
        const currentDay = getDayOfWeek(now);
        const currentTimeInMinutes = now.getHours() * 60 + now.getMinutes();
        let foundProgram = null;

        try {
            const snapshot = await database.ref('programas').once('value');
            if (snapshot.exists()) {
                const programs = snapshot.val();
                for (let key in programs) {
                    if (programs.hasOwnProperty(key)) {
                        const program = programs[key];
                        const schedule = program.schedule;

                        const dayMatch = schedule.match(/^(.*?)\s*(\d{1,2}:\d{2}\s*(AM|PM)?\s*-\s*\d{1,2}:\d{2}\s*(AM|PM)?)$/i);
                        if (!dayMatch || dayMatch.length < 3) continue;

                        let daysPart = dayMatch[1].trim();
                        let timePartStr = dayMatch[2].trim();

                        let [startTimeStr, endTimeStr] = timePartStr.split(' - ');
                        startTimeStr = convertTo24Hour(startTimeStr);
                        endTimeStr = convertTo24Hour(endTimeStr);

                        const programStartTime = parseTime(startTimeStr);
                        const programEndTime = parseTime(endTimeStr);

                        const daysOfWeek = [];
                        if (daysPart.includes('Lunes a Viernes')) {
                            daysOfWeek.push('Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes');
                        } else if (daysPart.includes('Sábados y Domingos')) {
                            daysOfWeek.push('Sábado', 'Domingo');
                        } else {
                            daysPart.split(/,|\s+y\s+/).forEach(dayRange => {
                                const trimmedDayRange = dayRange.trim();
                                if (trimmedDayRange.includes('a')) {
                                    const allDays = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo'];
                                    const [startDayName, endDayName] = trimmedDayRange.split('a').map(d => d.trim());
                                    const startIndex = allDays.indexOf(startDayName);
                                    const endIndex = allDays.indexOf(endDayName);
                                    if (startIndex !== -1 && endIndex !== -1) {
                                        for (let i = startIndex; i <= endIndex; i++) {
                                            daysOfWeek.push(allDays[i]);
                                        }
                                    }
                                } else if (trimmedDayRange) {
                                    daysOfWeek.push(trimmedDayRange);
                                }
                            });
                        }
                        
                        const formattedDaysOfWeek = daysOfWeek.map(d => d.charAt(0).toUpperCase() + d.slice(1).toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, ""));

                        let isOvernight = programEndTime < programStartTime;
                        let isCurrentDay = formattedDaysOfWeek.includes(currentDay);

                        if (isCurrentDay) {
                            if (isOvernight) {
                                if (currentTimeInMinutes >= programStartTime || currentTimeInMinutes < programEndTime) {
                                    foundProgram = program;
                                    break;
                                }
                            } else {
                                if (currentTimeInMinutes >= programStartTime && currentTimeInMinutes < programEndTime) {
                                    foundProgram = program;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        } catch (error) {
            console.error("Error al cargar programas para la lógica de visualización:", error);
        }

        if (foundProgram) {
            miniSongTitle.textContent = foundProgram.name;
            miniArtistName.textContent = "Al Aire: " + foundProgram.schedule;
            miniArtistName.classList.add('program-info'); 
        } else {
            miniSongTitle.textContent = currentAzuraCastData.title;
            miniArtistName.textContent = currentAzuraCastData.artist;
            miniArtistName.classList.remove('program-info');
        }
    }

    // --- Orquestación de Actualizaciones de Mini-Reproductor ---
    async function initMiniPlayerUpdates() {
        await fetchAzuraCastMetadata(); 
        // Llama a updateMiniPlayerDisplay aquí también, para asegurar que se muestren los metadatos iniciales
        updateMiniPlayerDisplay(); 

        setInterval(fetchAzuraCastMetadata, 10 * 1000); 
        setInterval(updateMiniPlayerDisplay, 60 * 1000); 
    }

    // --- Lógica del Modal de Noticias ---
    const newsModal = document.getElementById('newsModal');
    const modalNewsImage = document.getElementById('modalNewsImage'); // Nuevo elemento para la imagen
    const modalNewsTitle = document.getElementById('modalNewsTitle');
    const modalNewsDate = document.getElementById('modalNewsDate');
    const modalNewsContent = document.getElementById('modalNewsContent');
    const closeButton = document.querySelector('.close-button');

    function openNewsModal(title, date, content, imageUrl) {
        modalNewsTitle.textContent = title;
        modalNewsDate.textContent = date;
        modalNewsContent.textContent = content; 
        
        if (imageUrl) {
            modalNewsImage.src = imageUrl;
            modalNewsImage.style.display = 'block'; // Mostrar la imagen si hay URL
        } else {
            modalNewsImage.style.display = 'none'; // Ocultar si no hay URL
            modalNewsImage.src = ''; // Limpiar src
        }

        newsModal.classList.add('show');
    }

    closeButton.addEventListener('click', () => {
        newsModal.classList.remove('show');
    });

    window.addEventListener('click', (event) => {
        if (event.target == newsModal) {
            newsModal.classList.remove('show');
        }
    });

    // --- Funciones para cargar datos de Firebase y mostrarlos ---

    const newsListDiv = document.getElementById('news-list');
    const videosListDiv = document.getElementById('videos-list');
    const programsListDiv = document.getElementById('programs-list');
    const featuresListUl = document.getElementById('features-list');
    const showMoreVideosBtn = document.getElementById('showMoreVideosBtn');
    const showMoreVideosContainer = document.getElementById('show-more-videos-container');

    let allVideos = []; // Almacenará todas las canciones del top 10

    function loadNews() {
        newsListDiv.innerHTML = '<p class="no-data-message">Cargando noticias...</p>';
        database.ref('noticias').orderByChild('date').once('value')
            .then(snapshot => {
                newsListDiv.innerHTML = ''; 
                if (!snapshot.exists() || snapshot.val() === null) {
                    newsListDiv.innerHTML = '<p class="no-data-message">No hay noticias disponibles en este momento.</p>';
                    return;
                }
                const newsData = snapshot.val();
                const sortedNews = [];
                for (let key in newsData) {
                    if (newsData.hasOwnProperty(key)) {
                        sortedNews.push({ id: key, ...newsData[key] });
                    }
                }
                sortedNews.sort((a, b) => b.date - a.date);

                sortedNews.forEach(newsItem => {
                    const articleDiv = document.createElement('div');
                    articleDiv.className = 'news-article';
                    
                    const formattedDate = new Date(newsItem.date).toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' });
                    
                    const imageUrlHtml = newsItem.imageUrl ? `<img src="${newsItem.imageUrl}" alt="${newsItem.title}" onerror="this.style.display='none';">` : '';

                    articleDiv.innerHTML = `
                        ${imageUrlHtml}
                        <h3>${newsItem.title}</h3>
                        <span class="news-date">${formattedDate}</span>
                        <p class="news-content">${newsItem.content}</p>
                        <button class="read-more-btn" 
                                data-title="${newsItem.title}" 
                                data-date="${formattedDate}" 
                                data-content="${newsItem.content}"
                                data-imageurl="${newsItem.imageUrl || ''}">Ver más</button>
                    `;
                    
                    articleDiv.querySelector('.read-more-btn').addEventListener('click', function() {
                        openNewsModal(
                            this.dataset.title,
                            this.dataset.date,
                            this.dataset.content,
                            this.dataset.imageurl
                        );
                    });
                    newsListDiv.appendChild(articleDiv);
                });
            })
            .catch(error => {
                console.error("Error al cargar noticias:", error);
                newsListDiv.innerHTML = '<p class="no-data-message">Error al cargar las noticias.</p>';
            });
    }

    function renderVideos(videosToRender) {
        videosListDiv.innerHTML = ''; // Limpiar antes de renderizar
        if (videosToRender.length === 0) {
            videosListDiv.innerHTML = '<p class="no-data-message">No hay videos en el Top 10 disponibles.</p>';
            return;
        }

        videosToRender.forEach(videoItem => {
            const videoCard = document.createElement('div');
            videoCard.className = 'video-card';
            // Usa el atributo `loading="lazy"` para mejorar el rendimiento
            videoCard.innerHTML = `
                <iframe src="https://www.youtube.com/embed/${videoItem.videoId}?controls=0" 
                        frameborder="0" 
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                        allowfullscreen 
                        loading="lazy"></iframe>
                <div class="video-card-info">
                    <span class="video-rank">#${videoItem.rank}</span>
                    <h3>${videoItem.title}</h3>
                    <p>ID: ${videoItem.videoId}</p>
                </div>
            `;
            videosListDiv.appendChild(videoCard);
        });
    }

    function loadVideos() {
        videosListDiv.innerHTML = '<p class="no-data-message">Cargando videos...</p>';
        database.ref('top10videos').orderByChild('rank').once('value')
            .then(snapshot => {
                videosListDiv.innerHTML = ''; // Limpiar mensaje de carga
                if (!snapshot.exists() || snapshot.val() === null) {
                    videosListDiv.innerHTML = '<p class="no-data-message">No hay videos en el Top 10 disponibles.</p>';
                    return;
                }
                const videosData = snapshot.val();
                allVideos = []; // Resetear el array de todos los videos
                for (let key in videosData) {
                    if (videosData.hasOwnProperty(key)) {
                        allVideos.push({ id: key, ...videosData[key] });
                    }
                }
                allVideos.sort((a, b) => a.rank - b.rank); // Asegurarse de que estén ordenados

                // Mostrar solo las primeras 3 canciones inicialmente
                renderVideos(allVideos.slice(0, 3)); 

                // Mostrar el botón "Ver Más" si hay más de 3 videos
                if (allVideos.length > 3) {
                    showMoreVideosContainer.style.display = 'block';
                } else {
                    showMoreVideosContainer.style.display = 'none';
                }
            })
            .catch(error => {
                console.error("Error al cargar videos:", error);
                videosListDiv.innerHTML = '<p class="no-data-message">Error al cargar los videos del Top 10.</p>';
                showMoreVideosContainer.style.display = 'none'; // Ocultar el botón si hay error
            });
    }

    // Event listener para el botón "Ver más" del Top 10
    showMoreVideosBtn.addEventListener('click', () => {
        renderVideos(allVideos); // Renderizar todos los videos
        showMoreVideosContainer.style.display = 'none'; // Ocultar el botón después de mostrar todos
    });


    function loadPrograms() {
        programsListDiv.innerHTML = '<p class="no-data-message">Cargando programas...</p>';
        database.ref('programas').orderByChild('name').once('value')
            .then(snapshot => {
                programsListDiv.innerHTML = ''; 
                if (!snapshot.exists() || snapshot.val() === null) {
                    programsListDiv.innerHTML = '<p class="no-data-message">No hay programas disponibles en este momento.</p>';
                    return;
                }
                const programsData = snapshot.val();
                const sortedPrograms = [];
                for (let key in programsData) {
                    if (programsData.hasOwnProperty(key)) {
                        sortedPrograms.push({ id: key, ...programsData[key] });
                    }
                }
                sortedPrograms.sort((a, b) => a.name.localeCompare(b.name));

                sortedPrograms.forEach(programItem => {
                    const programCard = document.createElement('div');
                    programCard.className = 'program-card';
                    programCard.innerHTML = `
                        <h3>${programItem.name}</h3>
                        <p class="schedule"><span class="material-icons">schedule</span> ${programItem.schedule}</p>
                        <p class="description">${programItem.description || 'Sin descripción.'}</p>
                    `;
                    programsListDiv.appendChild(programCard);
                });
            })
            .catch(error => {
                console.error("Error al cargar programas:", error);
                programsListDiv.innerHTML = '<p class="no-data-message">Error al cargar los programas.</p>';
            });
    }

    function loadFeatures() {
        featuresListUl.innerHTML = '<p class="no-data-message">Cargando funciones...</p>';
        database.ref('features').orderByChild('order').once('value')
            .then(snapshot => {
                featuresListUl.innerHTML = ''; 
                if (!snapshot.exists() || snapshot.val() === null) {
                    featuresListUl.innerHTML = '<p class="no-data-message">No hay funciones destacadas disponibles.</p>';
                    return;
                }
                const featuresData = snapshot.val();
                const sortedFeatures = [];
                for (let key in featuresData) {
                    if (featuresData.hasOwnProperty(key)) {
                        sortedFeatures.push({ id: key, ...featuresData[key] });
                    }
                }
                sortedFeatures.sort((a, b) => a.order - b.order);

                sortedFeatures.forEach(featureItem => {
                    const listItem = document.createElement('li');
                    listItem.innerHTML = `
                        <span class="material-icons">star</span> 
                        <strong>${featureItem.name}</strong>
                    `;
                    featuresListUl.appendChild(listItem);
                });
            })
            .catch(error => {
                console.error("Error al cargar funciones:", error);
                featuresListUl.innerHTML = '<p class="no-data-message">Error al cargar las funciones destacadas.</p>';
            });
    }

    // Cargar todos los datos al cargar la página
    document.addEventListener('DOMContentLoaded', () => {
        initMiniPlayerUpdates(); 
        loadNews();
        loadVideos();
        loadPrograms();
        loadFeatures();
    });

  </script>
</body>
</html>
